name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build/Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [ 1.22.x ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        run: go build -o ./bin/adr-er

      - name: Run tests
        run: go test -v ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x # Adjust this version to match your Go version

      - name: Build release binaries
        run: |
          GOOS=darwin  GOARCH=arm64 go build -o ./bin/adr-er-macos-arm64
          GOOS=darwin  GOARCH=amd64 go build -o ./bin/adr-er-macos-amd64
          GOOS=linux   GOARCH=amd64 go build -o ./bin/adr-er-linux
          GOOS=windows GOARCH=amd64 go build -o ./bin/adr-er.exe

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (MacOS arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/adr-er-macos-arm64
          asset_name: adr-er-macos-arm64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (MacOS amd64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/adr-er-macos-amd64
          asset_name: adr-er-macos-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/adr-er-linux
          asset_name: adr-er-linux
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/adr-er.exe
          asset_name: adr-er.exe
          asset_content_type: application/octet-stream
